/** \page Coding-Conventions

1. Classes and Methods
========================

Structures in C will represent \em objects of a given \em class. There will be multiple \em types of a given \em class, and type specific behavior will be determined by functions stored in <em>virtual method tables</em> (vtables).
Wrapper functions will be used to call methods in vtables.
vtables will be stored in dynamically linked libraries.

Structures will be given names like "bbStructName", and will be found in files with names like "bbStructName.h" and "bbStructName.c". Objects' \em methods will have names like bbStructName_methodName()

It may make sense to define a \em namespace containing zero or more than one object.
These will be defined in files with names like "bbNameSpace.h" and "bbNameSpace.c"

2. Prefixes
========================

Prefixes will be used to describe the type of data stored in a variable, or defined constant used in lieu of an enum.

 - m_ for members of a struct containing data.
 - v_ for vtable indices.
 - i_ for container indices.
 - p_ for private data (such as Self, Prev, Next, InUse and Map for objects in a Pool).
 These should not be modified except through predetermined functions (such as those in bbPool.h) 
 - g_ for globals.
 - f_ for #defined return flags.
 - c_ for #defined commands.
 - a_ for #defined types of class bbActor (finite state machine) to be stored in a variable with v_ prefix.
 - f_Pool_ for #defined return flags used by bbPool objects
 
Some structures, such as those representing vector coordinates, need not use prefixes.
This makes sense for simple objects that are meant only to be members of more complex objects.

3. Flags
========================

As mentioned above, defined constants will be used in lieu of enums.
Definitions with prefix f_ will be defined as negative integers.
This is done for flexibility.
Functions may return a negative f_ value OR a non-negative i_ or v_ value.
Most functions will return integers like these, and return other data types by reference.

4. Virtual Method Tables
========================

Consider an object bbDrawable with member v_onDraw.

The function bbDrawable_onDraw(self); will look up the method in a predefined vtable at location v_onDraw and execute it.

5. Fixed Point Mathematics:
========================

Floating point mathematics will be avoided where possible.
Instead fixed point mathematics will be achieved using "conversion factors" with names like:
m_PointsPerPixel, m_PixelsPerTile, and m_TilesPerSquare found in the bbMapConstants struct.

One exception to this would be setting the scale of a sprite to be drawn to the viewport or screen.

The coordinates of such a sprite on-screen will also be a fixed point, with each pixel being divided up into, say, 8 points.

6. Member Functions:
========================

Member functions are defined in this way

bbObject_method(bbObject* self, args);

If it proves convenient, a wrapper method will be made in this way:

  bbObject_methodI(int32_t map, int32_t address, args);
  
  objects in a pool are aware of what map they are included in, so this will not be necessary.

Arguments should have as narrow scope as possible,
eg pass dont pass bbMap when bbMapConstants will suffice.

The first argument to a constructor should be a reference to a pointer that will point to the new object.

Containers have knowledge of what map they are in.

constructors will look like:

int32_t bbObject_new(bbObject** self, bbObjects* container, ... );

arguments of functions will be in lowerCamelCase

*/
